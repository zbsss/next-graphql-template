/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../graphql/context"
import type { core, connectionPluginCore } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Role: "ADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Counter: { // root type
    count: number; // Int!
  }
  Link: { // root type
    category: string; // String!
    description: string; // String!
    id: string; // String!
    imageUrl: string; // String!
    title: string; // String!
    url: string; // String!
  }
  LinkConnection: { // root type
    edges?: Array<NexusGenRootTypes['LinkEdge'] | null> | null; // [LinkEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  LinkEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Link'] | null; // Link
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Query: {};
  Subscription: {};
  User: { // root type
    email?: string | null; // String
    id: string; // String!
    image?: string | null; // String
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Counter: { // field return type
    count: number; // Int!
  }
  Link: { // field return type
    category: string; // String!
    description: string; // String!
    id: string; // String!
    imageUrl: string; // String!
    title: string; // String!
    url: string; // String!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  LinkConnection: { // field return type
    edges: Array<NexusGenRootTypes['LinkEdge'] | null> | null; // [LinkEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  LinkEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Link'] | null; // Link
  }
  Mutation: { // field return type
    counter: NexusGenRootTypes['Counter']; // Counter!
    createLink: NexusGenRootTypes['Link']; // Link!
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Query: { // field return type
    counter: NexusGenRootTypes['Counter']; // Counter!
    links: NexusGenRootTypes['LinkConnection']; // LinkConnection!
  }
  Subscription: { // field return type
    counter: NexusGenRootTypes['Counter']; // Counter!
  }
  User: { // field return type
    bookmarks: NexusGenRootTypes['Link'][]; // [Link!]!
    email: string | null; // String
    id: string; // String!
    image: string | null; // String
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenFieldTypeNames {
  Counter: { // field return type name
    count: 'Int'
  }
  Link: { // field return type name
    category: 'String'
    description: 'String'
    id: 'String'
    imageUrl: 'String'
    title: 'String'
    url: 'String'
    users: 'User'
  }
  LinkConnection: { // field return type name
    edges: 'LinkEdge'
    pageInfo: 'PageInfo'
  }
  LinkEdge: { // field return type name
    cursor: 'String'
    node: 'Link'
  }
  Mutation: { // field return type name
    counter: 'Counter'
    createLink: 'Link'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Query: { // field return type name
    counter: 'Counter'
    links: 'LinkConnection'
  }
  Subscription: { // field return type name
    counter: 'Counter'
  }
  User: { // field return type name
    bookmarks: 'Link'
    email: 'String'
    id: 'String'
    image: 'String'
    role: 'Role'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createLink: { // args
      category: string; // String!
      description: string; // String!
      imageUrl: string; // String!
      title: string; // String!
      url: string; // String!
    }
  }
  Query: {
    links: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}